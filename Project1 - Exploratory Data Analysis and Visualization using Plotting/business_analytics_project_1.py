# -*- coding: utf-8 -*-
"""Business Analytics Project 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/188L030fAJh0HAlD_ymSt3y0Bav5f7_EI
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

data = pd.read_csv('/content/sales_country_data.csv')

#using head,shape and dtype functions to read the dataset
data.head(10)
data.shape
data.dtypes

data.describe()

# Defining custom bins
custom_bins = list(range(50000, 360000, 50000))  # Specifying bin edges starting at 50,000, end at 350,000, with step of 50,000

# Plotting histogram for Sales
plt.hist(data['sales'], bins=custom_bins, color='skyblue', edgecolor='black')
plt.title('Distribution of Sales')
plt.xlabel('Sales')
plt.ylabel('Frequency')

# Customizing the x-axis ticks
custom_labels = ['50K', '100K', '150K', '200K', '250K', '300K', '350K']
plt.xticks(custom_bins, custom_labels)

# Showing the histogram
plt.show()

# Defining custom bins
custom_bins = np.arange(0.00, 0.201, 0.025) # Specifying bin edges using numpy.arrange function since datatype is float

# Plotting histogram for Discounts
plt.hist(data['discount'], bins=8, color='salmon', edgecolor='black')
plt.title('Distribution of Discounts')
plt.xlabel('Discounts')
plt.ylabel('Frequency')

# Customizing the x-axis ticks
custom_labels = ['0.00', '0.025', '0.050', '0.075', '0.100', '0.125', '0.150', '0.175', '0.200']
plt.xticks(custom_bins, custom_labels)

# Showing the histogram
plt.show()

# Converting 'year' column to datetime type
data['year'] = pd.to_datetime(data['year'], format='%Y')

# Grouping data by year and calculate the sum of sales for each year
yearly_sales = data.groupby(data['year'].dt.year)['sales'].sum()
yearly_sales

# Grouping the data by 'month' and 'day', then calculating the total sales for each combination
monthly_daily_sales = data.groupby(['month', 'day'])['sales'].sum().reset_index()

# Finding the month and day with the highest total sales
highest_sales_month_day = monthly_daily_sales.loc[monthly_daily_sales['sales'].idxmax()]
highest_sales_month_day

# Group the data by 'month' and calculate the total sales for each month
monthly_sales = data.groupby('month')['sales'].sum().reset_index()

# Find the month with the highest total sales
month_with_highest_sales = monthly_sales.loc[monthly_sales['sales'].idxmax()]

# Find the month with the lowest total sales
month_with_lowest_sales = monthly_sales.loc[monthly_sales['sales'].idxmin()]

print(month_with_highest_sales)
print(month_with_lowest_sales)

# Group the data by 'country' and calculate the total sales for each country
country_sales = data.groupby('country')['sales'].sum()

# Find the country with the highest sales
highest_sales_country = country_sales.idxmax()
highest_sales_amount = country_sales.max()

# Find the country with the lowest sales
lowest_sales_country = country_sales.idxmin()
lowest_sales_amount = country_sales.min()

# Print or display the results
print(f'Highest Sales Country: {highest_sales_country} (Sales: {highest_sales_amount})')
print(f'Lowest Sales Country: {lowest_sales_country} (Sales: {lowest_sales_amount})')

# Defining seasons and their corresponding months
seasons = {
    'Winter': ['December', 'January', 'February'],
    'Spring': ['March', 'April', 'May'],
    'Summer': ['June', 'July', 'August'],
    'Fall': ['September', 'October', 'November']
}

# Creating a new column 'Season' based on the month names
data['Season'] = data['month'].apply(lambda m: next(season for season, months in seasons.items() if m in months))

# Grouping the data by 'Season' and calculating the total sales for each season
seasonal_sales = data.groupby('Season')['sales'].sum().reset_index()

# Creating a line plot to visualize the seasonal sales trends
plt.figure(figsize=(10, 6))
plt.plot(seasonal_sales['Season'], seasonal_sales['sales'], marker='o', linestyle='-')
plt.title('Seasonal Sales Trends')
plt.xlabel('Season')
plt.ylabel('Total Sales')
plt.grid(True)
plt.show()

# Grouping the data by 'month' and calculate the total sales for each month
monthly_sales = data.groupby('month')['sales'].sum().reset_index()

# Finding the month with the highest total sales
month_with_highest_sales = monthly_sales.loc[monthly_sales['sales'].idxmax()]

# Finding the month with the lowest total sales
month_with_lowest_sales = monthly_sales.loc[monthly_sales['sales'].idxmin()]

# Creating a bar plot to visualize the total sales for each month
plt.figure(figsize=(12, 6))
plt.bar(monthly_sales['month'], monthly_sales['sales'], color='royalblue', alpha=0.7, label='Monthly Sales')
plt.title('Total Sales per Month')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.axvline(x=month_with_highest_sales['month'], color='black', linestyle='--', label='Highest Sales Month')
plt.axvline(x=month_with_lowest_sales['month'], color='green', linestyle='-', label='Lowest Sales Month')
plt.legend()
plt.tight_layout()
plt.show()

# Grouping the data by 'country' and calculate the total sales for each country
country_sales = data.groupby('country')['sales'].sum().reset_index()

# Finding the country with the highest sales
highest_sales_country = country_sales.loc[country_sales['sales'].idxmax()]

# Finding the country with the lowest sales
lowest_sales_country = country_sales.loc[country_sales['sales'].idxmin()]

# Creating a bar plot to visualize the total sales for each country
plt.figure(figsize=(12, 6))
plt.bar(country_sales['country'], country_sales['sales'], color='royalblue', alpha=0.7, label='Total Sales')
plt.title('Total Sales per Country')
plt.xlabel('Country')
plt.ylabel('Total Sales')
plt.axhline(y=highest_sales_country['sales'], color='Red', linestyle='-', label='Highest Sales Country')
plt.axhline(y=lowest_sales_country['sales'], color='Green', linestyle='-', label='Lowest Sales Country')
plt.legend()
plt.tight_layout()
plt.show()

# Defining a mapping of months to seasons
season_mapping = {
    'December': 'Winter',
    'January': 'Winter',
    'February': 'Winter',
    'March': 'Spring',
    'April': 'Spring',
    'May': 'Spring',
    'June': 'Summer',
    'July': 'Summer',
    'August': 'Summer',
    'September': 'Fall',
    'October': 'Fall',
    'November': 'Fall'
}

# Adding a new column 'Season' based on the mapping
data['Season'] = data['month'].map(season_mapping)

# Grouping the data by 'Season' and 'month' and calculate the total sales for each combination
seasonal_monthly_sales = data.groupby(['Season', 'month'])['sales'].sum().reset_index()

# Creating a bar plot to visualize the seasonal sales trends with months
plt.figure(figsize=(12, 6))
ax = plt.gca()

# Defining unique seasons and corresponding colors
seasons = seasonal_monthly_sales['Season'].unique()
colors = ['royalblue', 'orange', 'green', 'red']

# Loop through each season to create bar and trend line plots
for i, season in enumerate(seasons):
    season_data = seasonal_monthly_sales[seasonal_monthly_sales['Season'] == season]

    # Bar plot for the current season with months as x-axis labels
    plt.bar(season_data['month'], season_data['sales'], color=colors[i], alpha=0.7, label=season)

    # Line plot for the trend line of the current season
    overall_monthly_sales = season_data.groupby('month')['sales'].sum().reset_index()
    plt.plot(overall_monthly_sales['month'], overall_monthly_sales['sales'], color=colors[i], linestyle='-', marker='o', label=f'Trend ({season})')

plt.title('Seasonal Sales Trends with Months and Trend Lines')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.legend()
plt.tight_layout()
plt.show()